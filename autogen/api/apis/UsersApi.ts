/* tslint:disable */
/* eslint-disable */
/**
 * Backend BoilerPlate
 * An example NodeJS express project used for bootstrapping services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@simonball.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginPost200Response,
  LogoutGet200Response,
  SignupPost200Response,
  UserBasic,
  UsersGet200Response,
  UsersGet500Response,
} from '../models';
import {
    LoginPost200ResponseFromJSON,
    LoginPost200ResponseToJSON,
    LogoutGet200ResponseFromJSON,
    LogoutGet200ResponseToJSON,
    SignupPost200ResponseFromJSON,
    SignupPost200ResponseToJSON,
    UserBasicFromJSON,
    UserBasicToJSON,
    UsersGet200ResponseFromJSON,
    UsersGet200ResponseToJSON,
    UsersGet500ResponseFromJSON,
    UsersGet500ResponseToJSON,
} from '../models';

export interface LoginPostRequest {
    userBasic: UserBasic;
}

export interface SignupPostRequest {
    userBasic: UserBasic;
}

export interface UsersPostRequest {
    userBasic: UserBasic;
}

export interface UsersUserIdDeleteRequest {
    userId: string;
}

export interface UsersUserIdGetRequest {
    userId: string;
}

export interface UsersUserIdPutRequest {
    userId: string;
    userBasic: UserBasic;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Log user in and retrieve JWT token
     */
    async loginPostRaw(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginPost200Response>> {
        if (requestParameters.userBasic === null || requestParameters.userBasic === undefined) {
            throw new runtime.RequiredError('userBasic','Required parameter requestParameters.userBasic was null or undefined when calling loginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserBasicToJSON(requestParameters.userBasic),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Log user in and retrieve JWT token
     */
    async loginPost(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginPost200Response> {
        const response = await this.loginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log user in and retrieve JWT token
     */
    async logoutGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogoutGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Log user in and retrieve JWT token
     */
    async logoutGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogoutGet200Response> {
        const response = await this.logoutGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Register a new User
     */
    async signupPostRaw(requestParameters: SignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignupPost200Response>> {
        if (requestParameters.userBasic === null || requestParameters.userBasic === undefined) {
            throw new runtime.RequiredError('userBasic','Required parameter requestParameters.userBasic was null or undefined when calling signupPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserBasicToJSON(requestParameters.userBasic),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Register a new User
     */
    async signupPost(requestParameters: SignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignupPost200Response> {
        const response = await this.signupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find All Users
     */
    async usersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Find All Users
     */
    async usersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersGet200Response> {
        const response = await this.usersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add User
     */
    async usersPostRaw(requestParameters: UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userBasic === null || requestParameters.userBasic === undefined) {
            throw new runtime.RequiredError('userBasic','Required parameter requestParameters.userBasic was null or undefined when calling usersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserBasicToJSON(requestParameters.userBasic),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add User
     */
    async usersPost(requestParameters: UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete User By Id
     */
    async usersUserIdDeleteRaw(requestParameters: UsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{UserId}`.replace(`{${"UserId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete User By Id
     */
    async usersUserIdDelete(requestParameters: UsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Find User By Id
     */
    async usersUserIdGetRaw(requestParameters: UsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{UserId}`.replace(`{${"UserId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find User By Id
     */
    async usersUserIdGet(requestParameters: UsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update User By Id
     */
    async usersUserIdPutRaw(requestParameters: UsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdPut.');
        }

        if (requestParameters.userBasic === null || requestParameters.userBasic === undefined) {
            throw new runtime.RequiredError('userBasic','Required parameter requestParameters.userBasic was null or undefined when calling usersUserIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{UserId}`.replace(`{${"UserId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserBasicToJSON(requestParameters.userBasic),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update User By Id
     */
    async usersUserIdPut(requestParameters: UsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdPutRaw(requestParameters, initOverrides);
    }

}
